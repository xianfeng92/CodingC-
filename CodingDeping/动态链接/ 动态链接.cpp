
// !! 1 为什么要动态链接

首先，要明确一个问题：~~ 为什么要用动态链接 ? ~~

主要出于以下两个原因：

1. 静态链接会造成硬盘与内存的空间浪费

静态链接是在链接的时候就把程序依赖的所有目标文件都合并到最终的可执行程序里，而一个程序往往会用到许多公共的目标文件（库），例如 C 语言标准库
（stdio.h、stdlib.h等）。如果计算机中的每个程序都包含 C 语言标准库的目标文件， 那么以当今计算机中程序的数量来看，你的硬盘空间是大概率不够的。同时，
静态链接的程序是被整体加载到内存中的， 因此，当多个程序都被加载到内存中，它们所包含的标准库部分也会被重复加载许多次， 这就造成了内存空间的极大浪费，
以今计算机操作系统中运行的程序数量来看，你有限的内存大小也是顶不住的。

2. 静态链接程序的更新困难

如果一个程序（假设是 Program1）使用的一个第三方公共目标文件（假设是 Lib.o） 进行了更新， 那么 Program1 需要进行重新链接，再发布给用户，用户需要重新下
载整个程序，如果这个程序用了 100 个模块（目标文件、库），每个假设是 1MB，整个程序 100MB，那么即使每次只改动了某个模块的一个地方，那么也要重新链接整
个程序，用户也要重新下载，对用户非常不友好。


// !! 2 动态链接

// !! 动态链接的原理就是把程序的模块分割开来, 使之成为一个个相互独立的文件， 并一直保持这种状态，直到程序被加载到内存中运行。

当点击该程序运行时, 该程序所依赖的所有模块（文件）都被加载到内存， 然后由 ~~动态链接器~~ 进行链接操作，链接操作基本与静态链接一致。

// !! 这种把链接过程推迟到运行时进行的思想就是动态链接的基本原理

1. 动态链接所加载的部分模块（公共模块）是可以被多个程序共用的，这就大大减少了内存浪费

2. 倘若程序中的某个模块更新了，理论上我们只需要覆盖掉老版本的模块目标文件就行（不过实际还要考虑得多一点，比如新旧接口兼容问题）


// !! 3 程序可扩展性和兼容性

动态链接还带来一个特点， 就是程序可以在运行时动态地选择加载各种程序模块，这种机制可以被用来制作插件（Plug-in）

动态连接还加强了程序在不同 平台/机器 的兼容性， 比如一个程序在不同平台运行时可以动态地链接到由操作系统提供的动态链接库， 这些动态链接库相当于在程序和操作系
统之间增加了一个~~中间层~~，从而消除了程序对不同平台依赖的差异性。有一句话说得好，“在计算机领域，没有什么是不能通过添加一层中间层解决的”（比如操作系统 A 和操作系统 B 
对于 printf() 的实现机制不同，如果我们的程序是静态链接的，那么程序就需要在 A、B 两个平台分别编译链接；如果用的是动态链接，那么程序只需要有一个版本，就可以在两个操
作系统上运行，动态地选择 printf() 的实现版本。



 









