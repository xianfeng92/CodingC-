// !! 共享库查找过程

在 Linux 系统中，动态链接器是 /lib/ld-linux.so.X (X是版本号)，程序所依赖的共享对象全部由动态链接器负责装载和初始化。


任何一个动态链接的模块所依赖的模块路径保存在 ”.dynamic” 段里面，由 DT_NEED 类型的项表示。动态链接器对于模块的查找有一定的规则:

1. 如果DT_NEED里面保存的是绝对路径，那么动态链接器就按照这个路径去查找

2. 如果 DT_NEED 里面保存的是相对路径，那么动态链接器会在 /lib、/usr/lib 和由 /etc/ld.so.conf 配置文件指定的目录中查找共享库

'为了程序的可移植行和兼容性，共享库的路径往往是相对的'。

如果动态链接器在每次查找共享库时都去遍历这些目录, 那将会非常耗费时。所以 Linux 系统中都有一个叫做 ldconfig 的程序，这个程序的作用是为共享库目录下的各个共享库创建、
删除或更新相应的 SO-NAME (即相应的符号链接)，这样每个共享库的 SO-NAME 就能够指向正确的共享库文件; 并且这个程序还会将这些 SO-NAME 收集起来，集中存放到 /etc/ld.so.cache文件里面，
并建立一个 SO-NAME 的缓存。当动态链接器要查找共享库时，它可以直接从 /etc/ld.so.cache 里面查找。而 /etc/ld.so.cache 的结构是经过特殊设计的，非常适合查找，所以
这个设计大大加快了共享库的查找过程。如果动态链接器在 /etc/ld.so.cache 里面没有找到所需要的共享库，那么它还会遍历 /lib和 /usr/lib 这两个目录，如果还是没有找到，
就宣告失败。

所以理论上讲，如果我们在系统指定的共享库目录下添加、删除或更新任何一个共享库，或者我们更改了 /etc/ld.so.conf 的配置，都应该运行 ldconfig 这个程序，以便调整 
SO-NAME 和 /etc/ld.so.cache 。很多软件包的安装程序在往系统里面安装共享库以后都会调用 ldconfig。


// !! 环境变量






