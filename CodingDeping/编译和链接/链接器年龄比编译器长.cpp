
// !! 链接器年龄比编译器长

计算机的程序开发并非从一开始就有着这么复杂的自动化编译、链接过程。'原始的链接概念远在高级程序语言发明之前就已经存在了'。

1. 在最开始的时候，程序员都是直接用机器语言来编写程序

2. 汇编语言使用接近人类的各种符号和标记来帮助记忆
   '符号(Symbol)' 这个概念随着汇编语言的普及迅速被使用，'它用来表示一个地址'，这个地址可能是一段子程序(后来发展成函数)的起始地址，也可以是一
    个变量的起始地址

有了汇编语言以后, 随之而来的是软件的规模也开始日渐庞大, 这时程序的代码量也已经开始快速地膨胀， 导致人们要开始考虑将不同功能的代码以一定的方式组织起来，
使得更加容易阅读和理解， 以便于日后修改和重复使用。

自然而然，人们开始将代码按照功能或性质划分，分别形成不同的功能模块, 不同的模块之间按照层次结构或其它结构来组织。

'在一个程序被分隔成多个模块以后，这些模块之间最后如何组合形成一个单一的程序是须解决的问题'。

'模块之间如何组合的问题可以归结为模块之间如何通信的问题'，最常见的属于静态语言的 C/C++ 模块之间通信有两种方式: 

1. 一种是模块间的函数调用

2. 另外一种是模块间的变量访问

函数访问须知道目标函数的地址，变量访问也须知道目标变量的地址，所以这两种方式都可以归结为一种方式，'那就是模块间符号的引用'。

// !! 模块间依靠符号来通信类似于拼图版， 定义符号(Symbol)的模块多出一块区域，引用该符号的模块刚好少了那一块区域，两者一拼接刚好完美组合。这个模块的拼接
// !! 过程就是链接(Linking)




