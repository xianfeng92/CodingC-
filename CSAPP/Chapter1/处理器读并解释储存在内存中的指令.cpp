

// !! 处理器读并解释储存在内存中的指令

此刻, hello.c 源程序已经被编译系统翻译成了可执行目标文件 hello, 并被存放在磁盘上。要想在 Unix 系统上运行该可执行文件, 我们将它的文件名
输入到称为 shell 的应用程序中.

linux> ./hello
hello, world
linux> 

shell 是一个命令行解释器, 它输出一个提示符, 等待输入一个命令行, 然后执行这个命令。如果该命令行的第一个单词不是一个内置的 shell 命令, 
那么 shell 就会假设这是一个可执行文件的名字, 它将加载并运行这个文件。所以在此例中，shell 将加载并运行 hello 程序，然后等待程序终止。
hello 程序在屏幕上输出它的消息, 然后终止。shell 随后输出一个提示符, 等待下一个输入的命令行。


// !! 系统的硬件组成

为了理解运行 hello 程序时发生了什么，我们需要了解一个典型系统的硬件组织

// !! 1.总线

贯穿整个系统的是一组电子管道,称作总线.它携带信息字节并负责在各个部件间传递, 通常'总线被设计成传送定长的字节块,也就是字（word)'.字中的字节
数（即字长）是一个基本的系统参数, 各个系统中都不尽相同。 现在的大多数机器字长要么是 4 个字节（32 位），要么是 8 个字节（64 位)


// !! 2.I/O 设备

I/O（输入/输出）设备是系统与外部世界的联系通道。我们的示例系统包括四个 I/O 设备: 作为用户输入的键盘和鼠标、作为用户输出的显示器、以及用于
长期存储数据和程序的磁盘驱动器（简单地说就是磁盘). 最开始, 可执行程序 hello 就存放在磁盘上。

每个 I/O 设备都通过一个控制器或适配器与 I/O 总线相连。控制器和适配器之间的区别主要在于它们的封装方式。控制器是 I/O 设备本身或者系统的主印
制电路板（通常称作主板）上的芯片组。而适配器则是一块插在主板插槽上的卡。'无论如何, 它们的功能都是在 I/O 总线和 I/O 设备之间传递信息'。


// !! 3.主存

'主存是一个临时存储设备', 在处理器执行程序时, 用来存放程序和程序处理的数据。从物理上来说, 主存是由一组动态随机存取存储器（DRAM）芯片组成的。
从逻辑上来说, 存储器是一个线性的字节数组, 每个字节都有其唯一的地址（数组索引), 这些地址是从零开始的。一般来说, 组成程序的每条机器指令都由不同
数量的字节构成。与 C 程序变量相对应的数据项的大小是根据类型变化的。比如, 在运行 Linux 的 x86-64 机器上，short 类型的数据需要 2 个字节,
int 和 float 类型需要 4 个字节，而 long 和 double 类型需要 8 个字节。 

// !! 4.处理器

中央处理单元（CPU）简称处理器, 是解释（或执行）存储在主存中指令的引擎。'处理器的核心是一个大小为一个字的存储设备（或寄存器)', 称为程序计数器
（PC）。 在任何时刻, PC 都指向主存中的某条机器语言指令（即含有该条指令的地址）

从系统通电开始, 直到系统断电, 处理器一直在不断地执行程序计数器指向的指令, 再更新程序计数器, 使其指向下一条指令。处理器看上去是按照一个非常
简单的指令执行模型来操作的, 这个模型是由指令集架构决定的。在这个模型中, 指令按照严格的顺序执行, 而执行一条指令包含执行一系列的步骤。'处理器
从程序计数器指向的内存处读取指令, 解释指令中的位, 执行该指令指示的简单操作, 然后更新 PC 使其指向下一条指令', 而这条指令并不一定和在内存中
刚刚执行的指令相邻。

这样的简单操作并不多, 它们围绕着主存、寄存器文件（register file）和算术/逻辑单元（ALU）进行。寄存器文件是一个小的存储设备, 由一些单个字长
的寄存器组成, 每个寄存器都有唯一的名字。ALU 计算新的数据和地址值。下面是一些简单操作的例子, CPU 在指令的要求下可能会执行这些操作。

1. 加载: 从主存复制一个字节或者一个字到寄存器，以覆盖寄存器原来的内容。

2. 存储: 从寄存器复制一个字节或者一个字到主存的某个位置，以覆盖这个位置上原来的内容

3. 操作: 把两个寄存器的内容复制到 ALU, ALU 对这两个字做算术运算, 并将结果存放到一个寄存器中, 以覆盖该寄存器中原来的内容

4. 跳转: 从指令本身中抽取一个字, 并将这个字复制到程序计数器（PC）中以覆盖 PC 中原来的值

处理器看上去是它的指令集架构的简单实现, 但是实际上现代处理器使用了非常复杂的机制来加速程序的执行。因此, 我们将处理器的指令集架构和处理器的微
体系结构区分开来: 指令集架构描述的是每条机器代码指令的效果; 而微体系结构描述的是处理器实际上是如何实现的。


// !! 1.4.2 运行 hello 程序


初始时, shell 程序执行它的指令, 等待我们输人一个命令。当我们在键盘上输人字符串 “./hello” 后, shell 程序将字符逐一读入寄存器, 再把它存放
到内存中.

当我们在键盘上敲回车键时, shell 程序就知道我们已经结束了命令的输入。然后 shell 执行一系列指令来加载可执行的 hello 文件, 这些指令将 
hello 目标文件中的代码和数据从磁盘复制到主存。数据包括最终会被输出的字符串 “hello, world\n”。

利用'直接存储器存取(DMA)技术' 数据可以不通过处理器而直接从磁盘到达主存。

一旦目标文件 hello 中的代码和数据被加载到主存, 处理器就开始执行 hello 程序的 main 程序中的机器语言指令。这些指令将 “hello, world\n” 
字符串中的字节从主存复制到寄存器文件, 再从寄存器文件中复制到显示设备, 最终显示在屏幕上。



