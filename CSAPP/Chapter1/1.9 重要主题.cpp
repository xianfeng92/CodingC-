
// !! 1.9 重要主题

系统不仅仅只是硬件。系统是硬件和系统软件互相交织的集合体，它们必须共同协作以达到运行应用程序的最终目的


// !! 1.9.1 阿姆达尔定律

Gene Amdahl 计算领域的早期先锋之一，对提升系统某一部分性能所带来的效果做出了简单却有见地的观察。这个观察被称为阿姆达尔定律（Amdahl's law）。
该定律的主要思想是， 当我们对系统的某个部分加速时，其对系统整体性能的影响取决于该部分的重要性和加速程度'。

举个例子，考虑这样一种情况，系统的某个部分初始耗时比例为 60%（α =0.6），其加速比例因子为 3（k=3）。则我们可以获得的加速比为1/[0.4+0.6/3]=1.67 倍。
虽然我们对系统的一个主要部分做出了重大改进, 但是获得的系统加速比却明显小于这部分的加速比。这就是 Amdahl 定律的主要观点——'要想显著加速整个系统，必须提
升全系统中相当大的部分的速度'。


// !! 表示相对性能

性能提升最好的表示方法就是用比例的形式 T_old/ T_new ，其中 T_old 为原始系统所需时间， T_new 为修改后的系统所需时间。如果有所改进，则比值应大于 1。我们用后缀 “×” 
来表示比例，因此，“2.2×” 读作 “2.2 倍”。


// !! 1.9.2 并发和并行

数字计算机的整个历史中, 有两个需求是驱动进步的持续动力: 一个是我们想要计算机做得更多, 另一个是我们想要计算机运行得更快。当处理器能够同时做更多的事情时，这两个因素都会
改进。我们用的术语'并发（concurrency）是一个通用的概念，指一个同时具有多个活动的系统'; 而术语'并行（parallelism）指的是用并发来使一个系统运行得更快'。并行可以在计
算机系统的多个抽象层次上运用。在此，我们按照系统层次结构中由高到低的顺序重点强调三个层次。


// !! 1.线程级并发

构建在进程这个抽象之上, 我们能够设计出同时有多个程序执行的系统, 这就导致了并发。使用线程，我们甚至能够在一个进程中执行多个控制流。自 20 世纪 60 年代初期出现时间共享
以来，计算机系统中就开始有了对并发执行的支持。传统意义上，这种并发执行只是模拟出来的，是通过使一台计算机在它正在执行的进程间快速切换来实现的，就好像一个杂耍艺人保持多个
球在空中飞舞一样。这种并发形式允许多个用户同时与系统交互，例如，当许多人想要从一个 Web 服务器获取页面时。它还允许一个用户同时从事多个任务，例如，在一个窗口中开启 
Web 浏览器，在另一窗口中运行字处理器，同时又播放音乐。在以前，即使处理器必须在多个任务间切换，大多数实际的计算也都是由一个处理器来完成的。这种配置称为单处理器系统。

当构建一个由单操作系统内核控制的多处理器组成的系统时, 我们就得到了一个多处理器系统。其实从 20 世纪 80 年代开始，在大规模的计算中就有了这种系统，但是直到最近，随着多
核处理器和超线程（hyperthreading）的出现，这种系统才变得常见。

'多核处理器是将多个 CPU（称为“核”）集成到一个集成电路芯片上'。一个典型多核处理器的组织结构， 其中微处理器芯片有 4 个 CPU 核，每个核都有自己的 L1 和 L2 高速缓存，
其中的'L1 高速缓存分为两个部分——一个保存最近取到的指令， 另一个存放数据'。这些核共享更高层次的高速缓存，以及到主存的接口。工业界的专家预言他们能够将几十个、最终会
是上百个核做到一个芯片上。

'超线程，有时称为同时多线程（simultaneous multi-threading）是一项允许一个 CPU 执行多个控制流的技术'。它涉及 CPU 某些硬件有多个备份，比如程序计数器和寄存器
文件, 而其他的硬件部分只有一份， 比如执行浮点算术运算的单元。常规的处理器需要大约 20000 个时钟周期做不同线程间的转换，而超线程的处理器可以在单个周期的基础上决定要
执行哪一个线程。这使得 CPU 能够更好地利用它的处理资源。比如，假设一个线程必须等到某些数据被装载到高速缓存中，那 CPU 就可以继续去执行另一个线程。举例来说，
Intel Core i7 处理器可以让每个核执行两个线程，所以一个 4 核的系统实际上可以并行地执行 8 个线程。

多处理器的使用可以从两方面提高系统性能。首先，它减少了在执行多个任务时模拟并发的需要。正如前面提到的，即使是只有一个用户使用的个人计算机也需要并发地执行多个活动。
其次，它可以使应用程序运行得更快，当然，这必须要求程序是以多线程方式来书写的，这些线程可以并行地高效执行。


// !! 2.指令级并行

'在较低的抽象层次上, 现代处理器可以同时执行多条指令的属性称为指令级并行'。早期的微处理器，如 1978 年的 Intel 8086，需要多个（通常是 3～10 个）时钟周期来执行一
条指令。最近的处理器可以保持每个时钟周期 2～4 条指令的执行速率。


// !! 1.9.3 计算机系统中抽象的重要性

抽象的使用是计算机科学中最为重要的概念之一。例如，为一组函数规定一个简单的应用程序接口（API）就是一个很好的编程习惯, 程序员无须了解它内部的工作流程便可以使用这些代码。

'不同的编程语言提供不同形式和等级的抽象支持', 例如 Java 类的声明和C语言的函数原型。

'处理器里，指令集架构提供了对实际处理器硬件的抽象'。使用这个抽象， 机器代码程序表现得就好像运行在一个一次只执行一条指令的处理器上。'底层的硬件远比抽象描述的要复杂精细，
它并行地执行多条指令，但又总是与那个简单有序的模型保持一致'。只要执行模型一样, 不同的处理器实现也能执行同样的机器代码，而又提供不同的开销和性能。


在学习操作系统时，我们介绍了三个抽象:

1. 文件是对 I/O 设备的抽象
2. 虚拟内存是对程序存储器(主存和 I/O 设备)的抽象
3. 进程是对一个正在运行的程序（处理器(指令集架构)、主存和 I/O设备）的抽象。

我们再增加一个新的抽象: 虚拟机，它提供对整个计算机的抽象，包括操作系统、处理器和程序。虚拟机的思想是 IBM 在 20 世纪 60 年代提出来的， 但是最近才显示出其管理计算
机方式上的优势，因为一些计算机必须能够运行为不同的操作系统（例如 Microsoft Windows、MacOS 和 Linux） 或同一操作系统的不同版本设计的程序。














