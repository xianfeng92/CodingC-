// !! 信息就是位 + 上下文

// hello.c
#include <stdio.h>
int main()
{
    printf("hello, world\n");
    return 0;
}

hello 程序的生命周期是从一个源程序（或者说源文件）开始的，即程序员通过编辑器创建并保存的文本文件, 文件名是 hello.c。源程序实际上
就是一个由值 0 和 1 组成的位（又称为比特）序列, 8 个位被组织成一组称为字节, 每个字节表示程序中的某些文本字符。

大部分的现代计算机系统都使用 ASCII 标准来表示文本字符, 这种方式实际上就是用一个唯一的单字节大小的 ✦整数值✦ 来表示每个字符

hello.c 程序是以字节序列的方式储存在文件中的, 每个字节都有一个整数值, 对应于某些字符。例如，第一个字节的整数值是 35，它对应的就是字符 “#”。
第二个字节的整数值为 105，它对应的字符是 ‘i’，依此类推。注意, 每个文本行都是以一个看不见的换行符 ‘\n’ 来结束的, 它所对应的整数值为 10。
像 hello.c 这样只由 ASCII 字符构成的文件称为文本文件，所有其他文件都称为二进制文件。

// !! hello.c 的表示方法说明了一个基本思想

系统中所有的信息——包括磁盘文件、内存中的程序、内存中存放的用户数据以及网络上传送的数据，都是由一串比特表示的。区分不同数据对象的唯一方
法是我们读到这些数据对象时的上下文。

比如，在不同的上下文中, 一个同样的字节序列可能表示一个整数、浮点数、字符串或者机器指令。作为程序员, 我们需要了解数字的机器表示方式, 因为它们
与实际的整数和实数是不同的。它们是对真值的有限近似值, 有时候会有意想不到的行为表现。


// !! 编程语言的起源

C 语言是贝尔实验室的 Dennis Ritchie 于 1969 年 ~ 1973 年间创建的

1. C 语言与 Unix 操作系统关系密切。C 从一开始就是作为一种用于 Unix 系统的程序语言开发出来的。大部分 Unix 内核（操作系统的核心部分),
   以及所有支撑工具和函数库都是用 C 语言编写的。

2. C 语言小而简单。C 语言的设计是由一个人而非一个协会掌控的，因此这是一个简洁明了、没有什么冗赘的设计。

3. C 语言是为实践目的设计的。C 语言是设计用来实现 Unix 操作系统的。后来，其他人发现能够用这门语言无障碍地编写他们想要的程序。

C 语言是系统级编程的首选, 同时它也非常适用于应用级程序的编写。然而, 它也并非适用于所有的程序员和所有的情况。 C 语言的指针是造成程序员困惑
和程序错误的一个常见原因。同时 C 语言还缺乏对非常有用的"抽象的显式支持", 例如类、对象和异常。 像 C++ 和 Java 这样针对应用级程序的新程序
语言解决了这些问题。




