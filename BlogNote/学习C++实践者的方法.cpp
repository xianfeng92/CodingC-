#include<iostream>



// !! 为什么要学习（并使用）C++

在所有可用 C 和 C++ 的领域，C++ 都是比C更好的语言。当我说“更好的”时候，我说的是 C++ 拥有比 C "更安全的类型检查、更好的抽象机制、更优秀的库"。

当然，凡事都有例外，如果你做的项目1）不大。2）编码中用不到什么抽象机制，甚至ADT（抽象数据类型）也用不到，RAII 也用不到，异常也用不到。3）你连基础库（如
简化资源管理的智能指针、智能容器）都用不着, 那么也许你用 C 的确没问题

// !! 在我看来，一个真正从实践意义上理性反对使用 C++ 的人只有一个理由：C++的复杂性带来的混乱抵消乃至超过了 C++ 的抽象机制和库（在他的特定项目中）带来的好处

虽然我们无法消除复杂性，我们实际上是可以容易地避开复杂性， 避短扬长的。

// !! 学习C++：实践者的方法

1. 如果你是一个 C++ 程序员，那么很大的可能性你会需要用到底层知识（硬件平台架构、缓存、指令流水线、硬件优化、内存、整数&浮点数运算等）

2. C++ 不同于 C 的一个关键地方就在于，C++ 在完全保留有 C 的高效的基础上，增添了抽象机制。而所谓的“现代C++风格”便是倡导正确利用 C++ 的抽象机制和这些机制构建出来的现
   代 C++ 库（以 STL 为代表）

3. C++ 虽然是 C 的超集，然而"用抽象机制扩展 C 语言的重大意义就在于用抽象去覆盖 C 当中裸露的种种语言特性"，让程序员能够在一个更自然的抽象层面上编程。比如你不是用 int* 
   加一个数组大小 n 来表示一个数组，而是用可自动增长的 vector； 比如你不是用 malloc/free ，而是用 智能指针 和 RAII 技术来管理资源； 比如你不是用一个只包含数据的结
   构体加上一组函数来做一个暴露的类，而是使用真正的 ADT


然而，C 毕竟是 C++ 的源头，剥开 C++ 的抽象外衣，底层仍然还是 C; 更关键的是，在实际编码当中，有时候还的确要 "C" 一把，比如在模块级的二进制接口封装上


int main(int argc, char **argv)
{

}