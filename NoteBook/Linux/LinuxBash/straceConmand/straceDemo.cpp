#include <iostream>

// !! Linux strace命令---跟踪程序执行

strace 常用来跟踪进程执行时的系统调用和所接收的信号。在 Linux 世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，
必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace 可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。


// !! ubuntu 下安装 strace 工具

sudo apt-get install strace -y

// !! 使用 strace 工具

» strace -tt -T echo "hello world"                            parallels@xforg
14:55:14.365747 execve("/usr/bin/echo", ["echo", "hello world"], 0x7fff698cd8e8 /* 71 vars */) = 0 <0.000351>
14:55:14.366340 brk(NULL)               = 0x556f282e1000 <0.000065>
14:55:14.366558 arch_prctl(0x3001 /* ARCH_??? */, 0x7ffcae140e90) = -1 EINVAL (无效的参数) <0.000082>
14:55:14.366913 access("/etc/ld.so.preload", R_OK) = -1 ENOENT (没有那个文件或目录) <0.000066>
14:55:14.367108 openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3 <0.000055>
14:55:14.367268 fstat(3, {st_mode=S_IFREG|0644, st_size=92699, ...}) = 0 <0.000053>
14:55:14.367436 mmap(NULL, 92699, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f822fb4c000 <0.000043>
14:55:14.367558 close(3)                = 0 <0.000060>
14:55:14.367719 openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3 <0.000082>
14:55:14.367883 read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360q\2\0\0\0\0\0"..., 832) = 832 <0.000115>
14:55:14.368104 pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784 <0.000076>
14:55:14.368374 pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32 <0.000014>
14:55:14.368441 pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X>\263"..., 68, 880) = 68 <0.000024>
14:55:14.368561 fstat(3, {st_mode=S_IFREG|0755, st_size=2029224, ...}) = 0 <0.000054>
14:55:14.368703 mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f822fb4a000 <0.000026>
14:55:14.368785 pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784 <0.000019>
14:55:14.368847 pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32 <0.000017>
14:55:14.368889 pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X>\263"..., 68, 880) = 68 <0.000008>
14:55:14.368921 mmap(NULL, 2036952, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f822f958000 <0.000012>
14:55:14.368954 mprotect(0x7f822f97d000, 1847296, PROT_NONE) = 0 <0.000014>
14:55:14.368988 mmap(0x7f822f97d000, 1540096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x25000) = 0x7f822f97d000 <0.000014>
14:55:14.369023 mmap(0x7f822faf5000, 303104, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x19d000) = 0x7f822faf5000 <0.000010>
14:55:14.369053 mmap(0x7f822fb40000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7f822fb40000 <0.000011>
14:55:14.369090 mmap(0x7f822fb46000, 13528, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f822fb46000 <0.000010>
14:55:14.369131 close(3)                = 0 <0.000008>
14:55:14.369173 arch_prctl(ARCH_SET_FS, 0x7f822fb4b580) = 0 <0.000007>
14:55:14.369248 mprotect(0x7f822fb40000, 12288, PROT_READ) = 0 <0.000015>
14:55:14.369295 mprotect(0x556f27d4c000, 4096, PROT_READ) = 0 <0.000013>
14:55:14.369337 mprotect(0x7f822fb90000, 4096, PROT_READ) = 0 <0.000015>
14:55:14.369370 munmap(0x7f822fb4c000, 92699) = 0 <0.000027>
14:55:14.369510 brk(NULL)               = 0x556f282e1000 <0.000008>
14:55:14.369542 brk(0x556f28302000)     = 0x556f28302000 <0.000009>
14:55:14.369574 openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3 <0.000014>
14:55:14.369632 fstat(3, {st_mode=S_IFREG|0644, st_size=8850624, ...}) = 0 <0.000008>
14:55:14.369703 mmap(NULL, 8850624, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f822f0e7000 <0.000013>
14:55:14.369744 close(3)                = 0 <0.000018>
14:55:14.369835 fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...}) = 0 <0.000009>
14:55:14.369880 write(1, "hello world\n", 12hello world
) = 12 <0.000017>
14:55:14.369936 close(1)                = 0 <0.000009>
14:55:14.369972 close(2)                = 0 <0.000007>
14:55:14.370032 exit_group(0)           = ?
14:55:14.370136 +++ exited with 0 +++
------------------------------------------


每一行都是一条系统调用，等号左边是系统调用的函数名及其参数，右边是该调用的返回值。strace 显示这些调用的参数并返回符号形式的值



// !! strace参数

-tt 在输出中的每一行前加上时间信息,微秒级
-T 显示每一调用所耗的时间
-e trace=file 
只跟踪有关文件操作的系统调用. 
-e trace=process 
只跟踪有关进程控制的系统调用. 
-e trace=network 
跟踪与网络有关的所有系统调用. 
-e strace=signal 
跟踪所有与系统信号有关的 系统调用 
-e trace=ipc 
跟踪所有与进程通讯有关的系统调用 


int main(int argc, char **argv)
{

}