
// !! list 容器

//!! list 基本概念

功能: 将数据进行链式存储

'链表(list)' 是一种物理存储单元上非连续的存储结构, 数据元素的逻辑顺序是通过链表中的指针链接实现的

链表的组成: 链表由一系列结点组成

结点的组成: 一个是存储数据元素的'数据域', 另一个是存储下一个结点地址的'指针域'

'STL 中的链表是一个双向循环链表'

由于链表的存储方式并不是连续的内存空间, 因此'链表 list 中的迭代器只支持前移和后移, 属于双向迭代器'


list 的优点:

1. 采用动态存储分配, 不会造成内存浪费和溢出

2. 链表执行插入和删除操作十分方便, 修改指针即可, 不需要移动大量元素


list的缺点:

链表灵活, 但是空间(指针域) 和 时间(遍历)额外耗费较大

List 有一个重要的性质, 插入操作和删除操作都不会造成原有 list 迭代器的失效, 这在 vector 是不成立的

总结: STL 中 List 和 vector 是两个最常被使用的容器, 各有优缺点

// !! list 构造函数

功能描述:

创建 list 容器函数原型:

1. list<T> lst; // list 采用模板类实现,对象的默认构造形式

2. list(beg,end); //构造函数将 [beg, end) 区间中的元素拷贝给本身

3. list(n,elem); //构造函数将 n 个 elem 拷贝给本身

4. list(const list &lst); //拷贝构造函数

总结: list 构造方式同其他几个 STL 常用容器, 熟练掌握即可


// !! list 赋值和交换

功能描述:

给 list 容器进行赋值, 以及交换 list 容器

函数原型:

1. assign(beg, end); //将 [beg, end) 区间中的数据拷贝赋值给本身

2. assign(n, elem); //将 n 个 elem 拷贝赋值给本身。

3. list& operator=(const list &lst); // 重载等号操作符

4. swap(lst); //将 lst 与本身的元素互换


总结: list 赋值和交换操作能够灵活运用即可



// !! list 大小操作

功能描述:

对 list 容器的大小进行操作

函数原型:

1. size(); // 返回容器中元素的个数

2. empty(); // 判断容器是否为空

3. resize(num); //重新指定容器的长度为 num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除

4. resize(num, elem); //重新指定容器的长度为 num，若容器变长，则以 elem 值填充新位置。​如果容器变短，则末尾超出容器长度的元素被删除


总结:

判断是否为空 --- empty
返回元素个数 --- size
重新指定个数 --- resize


// !! list 插入和删除

功能描述:

对 list 容器进行数据的插入和删除

函数原型:

1. push_back(elem);// 在容器尾部加入一个元素

2. pop_back();// 删除容器中最后一个元素

3. push_front(elem);// 在容器开头插入一个元素

4. pop_front();// 从容器开头移除第一个元素

5. insert(pos,elem);// 在 pos 位置插 elem 元素的拷贝，返回新数据的位置

6. insert(pos,n,elem);//在 pos 位置插入 n 个 elem 数据，无返回值

7. insert(pos,beg,end);//在 pos 位置插入 [beg,end)区间的数据，无返回值

8. clear();//移除容器的所有数据

9. erase(beg,end);//删除 [beg,end) 区间的数据，返回下一个数据的位置

10. erase(pos);//删除 pos 位置的数据，返回下一个数据的位置

11. remove(elem);//删除容器中所有与 elem 值匹配的元素

总结:

尾插 --- push_back
尾删 --- pop_back
头插 --- push_front
头删 --- pop_front
插入 --- insert
删除 --- erase
移除 --- remove
清空 --- clear


// !! list 数据存取

功能描述:

对 list 容器中数据进行存取

函数原型:

front(); //返回第一个元素
back(); //返回最后一个元素

总结:

1. list 容器中不可以通过 [] 或者 at 方式访问数据

2. 返回第一个元素 --- front

3. 返回最后一个元素 --- back


// !! list 反转和排序

功能描述:

将容器中的元素反转, 以及将容器中的数据进行排序

函数原型:

1. reverse(); //反转链表

2. sort(); //链表排序


总结:

反转 --- reverse()

排序 --- sort(成员函数)