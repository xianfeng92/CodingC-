// !! A.1　字节序（Byte Order）

在不同的计算机体系结构中, 对于数据 (比特、字节、字) 等的存储和传输机制有所不同, 因而引发了计算机领域中一个潜在但是又很重要的问题, 即'通信双方交流的信息单元应该以什么样
的顺序进行传送'。如果达不成一致的规则, 计算机的通信与存储将会无法进行。

'目前在各种体系的计算机中通常采用的字节存储机制主要有两种: 大端 (Big-endian) 和小端 (Little-endian)'。

首先让我们来定义两个概念：

MSB 是 Most Significant Bit/Byte 的首字母缩写, 通常译为最重要的位或最重要的字节。它通常用来表明在一个 bit 序列 (如一个 byte 是 8 个 bit 组成的一个序列) 或一个
byte 序列 (如 word 是两个 byte 组成的一个序列) 中对整个序列取值影响最大的那个 bit/byte。

LSB 是 Least Significant Bit/Byte 的首字母缩写, 通常译为最不重要的位或最不重要的字节。它通常用来表明在一个 bit 序列 或一个 byte 序列中对整个序列取值影响最小的那
个 bit/byte。


Big-endian 和 little-endian 的区别就是 big-endian 规定 MSB 在存储时放在低地址, 在传输时 MSB 放在流的开始; LSB 存储时放在高地址, 在传输时放在流的末尾。
little-endian 则相反。

例如: 0x12345678h 这个数据在不同机器中的存储是不同, 如表 A-1 所示。

Little-Endian 主要用于我们现在的 PC 的 CPU 中, 即 Intel 的 x86 系列兼容机; Big-Endian 则主要应用在目前的 Mac 机器中, 一般指 PowerPC 系列处理器。
另外值得一提的是, 目前的 TCP/IP 网络及 Java 虚拟机的字节序都是 Big-endian 的。这意味着如果通过网络传输 0x12345678 这个整形变量, 首先被发送的应该是 0x12, 接着是
0x34, 然后是 0x56, 最后是 0x78。所以我们的程序在处理网络流的时候, 必须注意字节序的问题。

