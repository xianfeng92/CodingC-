namespace std {
    class string {
        unsigned len;
        char* buf;
        public:
          explicit string(const char* str);
          string(const string&);
          ~string();
          string& operator=(const string&);
          string& operator=(const char* str);
          const char& operator[](unsigned idx) const;
          char& operator[](unsigned idx);
          const char* c_str() const;
          unsigned length() const;
          unsigned size() const;
    };


    string::string(const char* str) : len(0), pbuf(0){
        *this = str;
    }

    string::~string() {
        if(pbuf != 0) {
            delete[] pbuf;
            pbuf = 0;
        }
    }

    string& string::operator=(const string&s) {
        if(&s == this){
            return *this;
        }
        this->~string();
        len = s.len;
        pbuf = strcpy(new char[len + 1], s.pbuf);
        return *this;
    }

    string& string::operator=(const char* str) {
        this->~string();
        len = strlen(str);
        pbuf = strcpy(new char[len + 1], str);
        return *this;
    }

    const char& string::operator[](unsigned idx) const {
        return pbuf[idx];
    }

    char& string::operator[](unsigned idx) {
        return pbuf[idx];
    }

    unsigned string::length() const {
        return len;
    }

    unsigned string::size() const {
        return len;
    }

    ofstream& operator<<(ofstream& o, const string& s) {
        return o << s.c_str();
    }
}