// !! 3.2　目标文件是什么样的

我们大概能猜到, 目标文件中的内容至少有编译后的机器指令代码、数据。没错, 除了这些内容以外, 目标文件中还包括了链接时所须要的一些信息, 比如符号表、调试信息、字符串等。

程序源代码编译后的'机器指令经常被放在代码段 (Code Section) 里', 代码段常见的名字有 .code 或 .text; '全局变量和局部静态变量数据经常放在数据段 (Data Section)', 
数据段的一般名字都叫 .data。

ELF 文件的开头是一个"文件头", 它描述了整个文件的文件属性, 包括文件是否可执行、是静态链接还是动态链接及入口地址(如果是可执行文件)、目标硬件、目标操作系统等信息, 文件头
还包括一个段表(Section Table), 段表其实是一个描述文件中各个段的数组。段表描述了文件中各个段在文件中的偏移位置及段的属性等, 从段表里面可以得到每个段的所有信息。

一般 C 语言的编译后执行语句都编译成机器代码, 保存在 .text 段; 已初始化的全局变量和局部静态变量都保存在 .data 段; 未初始化的全局变量和局部静态变量一般放在一个叫 .bss
的段里。

我们知道未初始化的全局变量和局部静态变量默认值都为 0, 本来它们也可以被放在 .data 段的, 但是因为它们都是 0, 所以为它们在 .data 段分配空间并且存放数据 0 是没有必要的。
程序运行的时候它们的确是要占内存空间的, 并且可执行文件必须记录所有未初始化的全局变量和局部静态变量的大小总和, 记为 .bss 段。所以 '.bss 段只是为未初始化的全局变量和局部
静态变量预留位置而已,它并没有内容,所以它在文件中也不占据空间'。

总体来说, '程序源代码被编译以后主要分成两种段: 程序指令和程序数据。代码段属于程序指令, 而数据段和 .bss 段属于程序数据'。


很多人可能会有疑问: 为什么要那么麻烦, 把程序的指令和数据的存放分开? 其实数据和指令分段的好处有很多。主要有如下几个方面:

• 一方面是当程序被装载后, 数据和指令分别被映射到两个虚存区域。由于数据区域对于进程来说是可读写的, 而指令区域对于进程来说是只读的, 所以这两个虚存区域的权限可以被分别设置
  成可读写和只读。这样可以防止程序的指令被有意或无意地改写。

• 另外一方面是对于现代的 CPU 来说, 它们有着极为强大的缓存 (Cache) 体系。由于缓存在现代的计算机中地位非常重要, 所以程序必须尽量提高缓存的命中率。指令区和数据区的分离有
  利于提高程序的局部性。现代 CPU 的缓存一般都被设计成数据缓存和指令缓存分离, 所以程序的指令和数据被分开存放对 CPU 的缓存命中率提高有好处。


• 第三个原因, 其实也是最重要的原因, 就是当系统中运行着多个该程序的副本时, 它们的指令都是一样的, 所以内存中只须要保存一份该程序的指令部分。对于指令这种只读的区域来说是这
  样, 对于其他的只读数据也一样, 比如很多程序里面带有的图标、图片、文本等资源也是属于可以共享的。当然每个副本进程的数据区域是不一样的，它们是进程私有的。'不要小看这个共
  享指令的概念, 它在现代的操作系统里面占据了极为重要的地位, 特别是在有动态链接的系统中可以节省大量的内存'。

