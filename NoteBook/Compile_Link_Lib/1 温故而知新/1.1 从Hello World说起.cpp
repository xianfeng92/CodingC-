//!! 1.1 从Hello World说起

简单的事物背后往往又蕴涵着复杂的机制, 如果我们深入思考一个简单的 "Hello World" 程序, 就会发现很多问题看似很简单, 但实际上我们并没有一个非常清晰的思路; 或者在我们脑
海里有着模糊的印象, 但真正到某些细节的时候可能又模糊不清了。

比如对于 C 语言编写的 Hello World 程序:

#include <stdio.h>
int main(){
    printf("Hello World\n");
    return 0;
}

对于下面这些问题, 你的脑子里能够马上反应出一个很清晰又很明确的答案吗?

1. 程序为什么要被编译器编译了之后才可以运行?

2. 编译器在把 C 语言程序转换成可以执行的机器码的过程中做了什么, 怎么做的?

3. 最后编译出来的可执行文件里面是什么? 除了机器码还有什么? 它们怎么存放的, 怎么组织的?

4. #include <stdio.h> 是什么意思? 把 stdio.h 包含进来意味着什么? C 语言库又是什么? 它怎么实现的?

5. 不同的编译器(Microsoft VC、GCC) 和不同的硬件平台 (x86、ARM) 以及不同的操作系统(Windows、Linux、UNIX、QNX), 最终编译出来的结果一样吗? 为什么?

6. Hello World 程序是怎么运行起来的? 操作系统是怎么装载它的? 它从哪儿开始执行, 到哪儿结束? main 函数之前发生了什么? main 函数结束以后又发生了什么?

7. 如果没有操作系统, Hello World 可以运行吗? 如果要在一台没有操作系统的机器上运行 Hello World 需要什么? 应该怎么实现?

8. printf 是怎么实现的? 它为什么可以有不定数量的参数? 为什么它能够在终端上输出字符串?

9. Hello World 程序在运行时, 它在内存中是什么样子的?



