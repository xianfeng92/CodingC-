//!! 处理数据

'面向对象编程（OOP）的本质是设计并扩展自己的数据类型'。设计自己的数据类型就是让类型与数据匹配。如果正确做到了这一点，将会发现以后使用数据时会容
易得多。然而，'在创建自己的类型之前，必须了解并理解 C++ 内置的类型，因为这些类型是创建自己类型的基本组件'。内置的 C++ 类型分两组:基本类型和复合类型
。基本类型，即整数和浮点数。似乎只有两种类型，但 C++ 知道，没有任何一种整型和浮点型能够满足所有的编程要求，因此对于这两种数据，它提供了多种变体。


// !! 简单变量

程序通常都需要存储信息—如 Google 股票当前的价格、纽约市 8 月份的平均湿度、美国宪法中使用最多的字母及其相对使用频率或猫王模仿者的数目。为把信息存储
在计算机中，程序必须记录 3 个基本属性:

1. 信息将存储在哪里

2. 要存储什么值

3. 存储何种类型的信息

例如，假设实验室首席助理 Igor 使用了下面的语句:

int braincount;
braincount = 5;

这些语句告诉程序，它正在存储整数，并使用名称 braincount 来表示该整数的值（这里为5）。'实际上，程序将找到一块能够存储整数的内存，将该内存单元标记为
braincount，并将 5 复制到该内存单元中；然后，您可在程序中使用 braincount 来访问该内存单元'。这些语句没有告诉您，这个值将存储在内存的什么位置，但
程序确实记录了这种信息。实际上，可以使用 & 运算符来检索 braincount 的内存地址。

// !! 变量名

C++ 提倡使用有一定含义的变量名。如果变量表示差旅费，应将其命名为 cost_of_trip 或 costOfTrip ，而不要将其命名为 x 或 cot。必须遵循几种简单的
C++ 命名规则:

1. 在名称中只能使用字母字符、数字和下划线

2. 名称的第一个字符不能是数字

3. 区分大写字符与小写字符

4. 不能将 C++ 关键字用作名称

'以两个下划线或下划线和大写字母打头的名称被保留给实现（编译器及其使用的资源）使用。以一个下划线开头的名称被保留给实现，用作全局标识符'。如果想用两
个或更多的单词组成一个名称，通常的做法是用下划线字符将单词分开，如 my_onions 或者从第二个单词开始将每个单词的第一个字母大写，如 myEyeTooth。
（C程序员倾向于按C语言的方式使用下划线，而Pascal程序员喜欢采用大写方式）这两种形式都很容易将单词区分开，如 carDrip 和 cardRip 或 boat_sport 
和 boats_port。

// !! 整型

整数就是没有小数部分的数字，如 2、98、-5286 和 0。整数有很多，如果将无限大的整数看作很大，则不可能用有限的计算机内存来表示所有的整数。因此，语言
只能表示所有整数的一个子集。有些语言只提供一种整型（一种类型满足所有要求！），而 C++ 则提供好几种，这样便能够根据程序的具体要求选择最合适的整型。

'不同 C++ 整型使用不同的内存量来存储整数。使用的内存量越大，可以表示的整数值范围也越大'。另外，有的类型（符号类型）可表示正值和负值，而有的类型
（无符号类型）不能表示负值。术语宽度（width）用于描述存储整数时使用的内存量。使用的内存越多，则越宽。

C++ 的基本整型（按宽度递增的顺序排列）分别是 char、short、int、long 和 C++11 新增的 long long，其中每种类型都有符号版本和无符号版本，因此总
共有 10 种类型可供选择。

1. 整型 short、int、long 和 long long

   计算机内存由一些叫做位（bit）的单元组成。C++ 的 short、int、long 和 long long 类型通过使用不同数目的位来存储值，最多能够表示 4 种不同的
   整数宽度。如果在所有的系统中，每种类型的宽度都相同，则使用起来将非常方便。例如, 如果 short 总是 16 位，int 总是 32 位等等。不过生活并非那么简单，
   没有一种选择能够满足所有的计算机设计要求。

   C++ 提供了一种灵活的标准，它确保了最小长度（从 C 语言借鉴而来）, 如下所示:

   1. short 至少16位
   2. int 至少与 short 一样长
   3. long 至少 32 位，且至少与 int 一样长
   4. long long 至少 64 位，且至少与 long 一样长


// !! 位与字节

计算机内存的基本单元是位（bit）。可以将位看作电子开关，可以开，也可以关。关表示值 0，开表示值 1。8 位的内存块可以设置出 256 种不同的组合，因为每一位都可以
有两种设置，所以 8 位的总组合数为 2×2×2×2×2×2×2×2，即 256。因此，8 位单元可以表示 0-255 或者 -128 到 127 。每增加一位，组合数便加倍。这意味着可以把 
16 位单元设置成 65536 个不同的值，把 32 位单元设置成 4294 672 296 个不同的值，把 64 位单元设置为 18 446 744 073 709 551 616 个不同的值。作为比较，
unsigned long 存储不了地球上当前的人数和银河系的星星数，而 long long 能够。

'字节（byte）通常指的是 8 位的内存单元'。从这个意义上说，字节指的就是描述计算机内存量的度量单位，1KB 等于 1024 字节，1MB 等于 1024KB。然而，C++ 对字节的定
义与此不同。C++ 字节由至少能够容纳实现的基本字符集的相邻位组成，也就是说，可能取值的数目必须等于或超过字符数目。

在美国，基本字符集通常是 ASCII 和 EBCDIC 字符集，它们都可以用 8 位来容纳，所以在使用这两种字符集的系统中，C++ 字节通常包含8位。然而，国际编程可能需要使用更
大的字符集，如 Unicode，因此有些实现可能使用 16 位甚至 32 的字节。

实际上，short 是 short int 的简称，而 long 是 long int 的简称，但是程序设计者们几乎都不使用比较长的形式。

这 4 种类型（int、short、long 和 long long）都是符号类型，这意味着每种类型的取值范围中，负值和正值几乎相同。例如，16 位的int的取值范围为 -32768 到 
+32767。

要知道系统中整数的最大长度，可以在程序中使用 C++ 工具来检查类型的长度。首先，sizeof 运算符返回类型或变量的长度，单位为字节（运算符是内置的语言元素，对一个或
多个数据进行运算，并生成一个值。例如，加号运算符+将两个值相加）。前面说过，“字节”的含义依赖于实现，因此在一个系统中，两字节的 int 可能是16位，而在另一个系统中
可能是 32 位。其次，头文件 climits 中包含了关于整型限制的信息。具体地说，它定义了表示各种限制的符号名称。例如，INT_MAX 为 int 的最大取值，CHAR_BIT 为字节
的位数。程序清单3.1演示了如何使用这些工具。该程序还演示如何初始化，即使用声明语句将值赋给变量。

























