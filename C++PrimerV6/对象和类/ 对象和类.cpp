// !! 对象和类

'面向对象编程(OOP) 是一种特殊的、设计程序的概念性方法'，C++ 通过一些特性改进了 C 语言，使得应用这种方法更容易。

下面是最重要的 OOP 特性:

1. 抽象

2. 封装和数据隐藏

3. 多态

5. 继承

6. 代码的可重用性

为了实现这些特性并将它们组合在一起，C++ 所做的最重要的改进是提供了类。

// !! 过程性编程和面向对象编程

1. 采用过程性编程方法时，首先考虑要遵循的步骤，然后考虑如何表示这些数据

2. 采用 OOP 方法时，首先从用户的角度考虑对象——描述对象所需的数据以及描述用户与数据交互所需的操作。完成对接口的描述后，需要确定如何实现接口和数据存储。
   最后，使用新的设计方案创建出程序。


// !! 抽象和类

'将问题的本质特征抽象出来，并根据特征来描述解决方案'。抽象是通往用户定义类型的捷径，在 C++ 中，用户定义类型指的是实现抽象接口的类设计。

// !! 类型是什么

我们来看看是什么构成了类型。

首先，倾向于根据数据的外观(在内存中如何存储)来考虑数据类型。例如，char 占用 1 个字节的内存，而 double 通常占用 8 个字节的内存。但是稍加思索就会发现，
也可以'根据要对它执行的操作来定义数据类型'。

例如，int 类型可以使用所有的算术运算，可对整数执行加、减、乘、除运算，还可以对它们使用求模运算符（%）

而指针需要的内存数量很可能与 int 相同，甚至可能在内部被表示为整数。但不能对指针执行与整数相同的运算。例如，不能将两个指针相乘，这种运算没有意义的，因此 
C++ 没有实现这种运算。因此，'将变量声明为 int 或 float 指针时，不仅仅是分配内存，还规定了可对变量执行的操作'。


总之，指定基本类型完成了三项工作:

1. 决定数据对象需要的内存数量

2. 决定如何解释内存中的位(long 和 float 在内存中占用的位数相同，但将它们转换为数值的方法不同)

3. 决定可使用数据对象执行的操作或方法。

对于内置类型来说，有关操作的信息被内置到编译器中。但'在 C++ 中定义用户自定义的类型时，必须自己提供这些信息'。

付出这些劳动换来了根据实际需要定制新数据类型的强大功能和灵活性。

// !! C++ 中的类

'类是一种将抽象转换为用户定义类型的 C++ 工具'，它将数据表示和操纵数据的方法组合成一个整洁的包。

一般来说，类规范由两个部分组成:

1. 类声明: 以数据成员的方式描述数据部分，以成员函数(被称为方法)的方式描述公有接口

2. 类方法定义: 描述如何实现类成员函数



'什么是接口?'

接口是一个共享框架，供两个系统(如在计算机和打印机之间或者用户或计算机程序之间)交互时使用。

为开发一个类并编写一个使用它的程序，需要完成多个步骤。这里将开发过程分成多个阶段，而不是一次性完成。通常，C++ 程序员将接口(类定义)放在头文件中，并将实现(
类方法的代码)放在源代码文件中。这里采用这种典型做法。

Stock00.h 是第一个阶段的代码，它是 Stock 类的类声明。
#ifndef E14C33FD_BE4B_4C8A_BC23_01FEB92F5BA4
#define E14C33FD_BE4B_4C8A_BC23_01FEB92F5BA4

#include<string>

class Stock
{
private:
    long shares;
    double share_val;
    double total_val;
    void set_tot() { total_val - share_val *shares; }

public:
    void acquire(const std::string &co, long n, double pr);
    void buy(long num, double price);
    void sell(long num, double price);
    void update(double price);
    void show();
};

#endif /* E14C33FD_BE4B_4C8A_BC23_01FEB92F5BA4 */


首先，C++ 关键字 class 指出这些代码定义了一个类设计。这种语法指出，Stock 是这个新类的类型名。该声明让我们能够声明 Stock 类型的变量——称为对象或实例。
每个对象都表示一支股票。例如，下面的声明创建两个 Stock 对象，它们分别名为 sally 和 solly:

Stock sally;
Stock solly;

例如，sally对 象可以表示 Sally 持有的某公司股票。

接下来，要存储的数据以类数据成员(如 company 和 shares) 的形式出现。

例如，sally 的 company 成员存储了公司名称，share 成员存储了 Sally 持有的股票数量，share_val 成员存储了每股的价格，total_val 成员存储了股票总价格。
同样，要执行的操作以类函数成员(方法，如 sell()和 update())的形式出现。成员函数可以就地定义(如 set_tot())，也可以用原型表示。

'将数据和方法组合成一个单元是类最吸引人的特性'

istream 和 ostream 类有成员函数，如 get() 和 getline()，而 Stock 类声明中的函数原型说明了成员函数是如何建立的。例如，头文件 iostream 将 getline() 
的原型放在 istream 类的声明中。

1. 访问控制

关键字 private 和 public 也是新的，它们描述了对类成员的访问控制。使用类对象的程序都可以直接访问公有部分，但只能通过公有成员函数(或友元函数)来访问对
象的私有成员。因此，'公有成员函数是程序和对象的私有成员之间的桥梁，提供了对象和程序之间的接口。防止程序直接访问数据被称为数据隐藏'。'类设计尽可能将公有接口
与实现细节分开。公有接口表示设计的抽象组件。将实现细节放在一起并将它们与抽象分开被称为封装'。

OOP 和 C++

OOP 是一种编程风格，从某种程度说，它用于任何一种语言中。当然，可以将 OOP 思想融合到常规的 C 语言程序中。

数据隐藏不仅可以防止直接访问数据，还让开发者(类的用户)无需了解数据是如何被表示的。例如，show() 成员将显示某支股票的总价格(还有其他内容），这个值可以存储在对象
中，也可以在需要时通过计算得到。从使用类的角度看，使用哪种方法没有什么区别。所需要知道的只是各种成员函数的功能；也就是说，'需要知道成员函数接受什么样的参数以及返
回什么类型的值'。原则是将实现细节从接口设计中分离出来。如果以后找到了更好的、实现数据表示或成员函数细节的方法，可以对这些细节进行修改，而无需修改程序接口，这使
程序维护起来更容易。

2. 控制对成员的访问:公有还是私有

无论类成员是数据成员还是成员函数, 都可以在类的公有部分或私有部分中声明它。但'由于隐藏数据是 OOP 主要的目标之一，因此数据项通常放在私有部分，组成类接口的成员\
函数放在公有部分'；否则，就无法从程序中调用这些函数。

不必在类声明中使用关键字 private，因为这是类对象的默认访问控制:

class World
{
    float mass;// private by default
    char name[20];

public:
    void tellall() const;
}

'然而，为强调数据隐藏的概念，本书显式地使用了 private'。

'类和结构'

 类描述看上去很像是包含成员函数以及 public 和 private 可见性标签的结构声明。实际上，C++ 对结构进行了扩展，使之具有与类相同的特性。'它们之间唯一的区别是，
 结构的默认访问类型是 public，而类为 private'。'C++ 程序员通常使用类来实现类描述，而把结构限制为只表示纯粹的数据对象'(常被称为普通老式数据
 (POD，Plain Old Data)结构)。


3. 实现类成员函数

还需要创建类描述的第二部分: 为那些由类声明中的原型表示的成员函数提供代码。成员函数定义与常规函数定义非常相似，它们有函数头和函数体，也可以有返回类型和参数。
但是它们还有两个特殊的特征:'定义成员函数时，使用作用域解析运算符(::)来标识函数所属的类; 类方法可以访问类的 private 组件'。


'其定义位于类声明中的函数都将自动成为内联函数'，因此 Stock::set_tot() 是一个内联函数。类声明常将短小的成员函数作为内联函数，set_tot() 符合这样的要求。


4. 使用类

知道如何定义类及其方法后，来创建一个程序，它创建并使用类对象。'C++ 的目标是使得使用类与使用基本的内置类型(如 int 和 char)尽可能相同'。要创建类对象，可以
声明类变量，也可以使用 new 为类对象分配存储空间。可以将对象作为函数的参数和返回值，也可以将一个对象赋给另一个。




