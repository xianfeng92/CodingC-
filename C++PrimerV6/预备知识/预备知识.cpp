// !! 预备知识

C++ 是在 C 语言的基础上添加了对'面向对象编程'和'泛型编程'的支持,C++ 继承了 C 语言高效、简洁、快速和可移植性的传统。C++ 面向对象的特性带来了全新的编程方
法，这种方法是应对复杂程度不断提高的现代编程任务而设计的；C++ 模版特性提供了另外一种全新的编程方法---泛型编程

// !! C++ 简介

C++ 融合了三种不同的编程方式： 

1. C 语言代表的过程性语言

2. C++ 在 C 语言基础上添加的类代表的面向对象语言

3. C++ 模版支持的泛型编程

使用 C++ 原因之一就是利用其面向对象的特性。要利用这种特性，必须对标准 C 语言知识有比较深入的了解，因为它提供了基本类型、运算符、控制结构和语法规则。

// !! C++ 简史

在过去的几十年，计算机技术以令人惊讶的速度发展着，当前，笔记本电脑的计算速度和存储信息的能力超过了 20 世纪 60 年代的大型机。很多程序员可能还记得，将数叠穿孔卡
片提交给充斥整个房间的大型计算机系统的时代，而这种系统只有 100KB 的内存，比当今智能手机的内存都少得多。计算机语言也得到了发展，尽管变化可能不是天翻地覆的，但
也是非常重要的。'体积更大、功能更强的计算机引出了更大、更复杂的程序，而这些程序在程序管理和维护方面带来了新的问题'。

在 20 世纪 70 年代，C 和 Pascal 这样的语言引领人们进入了'结构化编程时代'，这种机制把秩序和规程带进了迫切需要这种性质的领域中。除了提供结构化编程工具外，'C 还
能生成简洁、快速运行的程序，并提供了处理硬件问题的能力，如管理通信端口和磁盘驱动器'。这些因素使 C 语言成为20世纪80年代占统治地位的编程语言。同时，20 世纪 80 年
代，人们也见证了一种新编程模式的成长：'面向对象编程（OOP）'。SmallTalk 和 C++ 语言具备这种功能。

// !! C 语言

1. C 语言

20 世纪 70 年代早期，贝尔实验室的 Dennis Ritchie 致力于开发 Unix 操作系统。为了完成这项工作，Ritchie 需要一种语言，它必须简洁，能够生成简洁、快速的程
序，并能够有效的控制硬件。

传统上，程序员使用汇编语言来满足这些需求，'汇编语言依赖于计算机的内部机器语言'。然而，汇编语言是低级（low-level）语言，即直接操作硬件，如直接访问 CPU 寄存器和
内存单元。因此汇编语言针对于特定的计算机处理器，要将汇编程序移植到另一种计算机上，必须使用不同的汇编语言重新编写程序。然而，UNIX 是为在不同的计算机（或平台）上工作
而设计的， 这意味着它是一种高级语言。'高级（high-level）语言致力于解决问题，而不针对特定的硬件'。'一种被称为编译器的特殊程序将高级语言翻译成特定计算机的内部语言'。
这样，就可以通过对每个平台使用不同的编译器来在不同的平台上使用同一个高级语言程序了。'Ritchie 希望有一种语言能将低级语言的效率、硬件访问能力和高级语言的通用性、可移
植性融合在一起，于是他在旧语言的基础上开发了 C 语言'。

2. C 语言编程原理

由于 C++ 在 C 语言的基础上移植了新的编程理念，因此我们首先来看一看 C 所遵循的旧的理念。'一般来说，计算机语言要处理两个概念——数据和算法'。数据是程序使用和处理的
信息，而算法是程序使用的方法。'C 语言与当前最主流的语言一样，在最初面世时也是过程性（procedural）语言，这意味着它强调的是编程的算法方面'。从概念上说，过程化编程
首先要确定计算机应采取的操作，然后使用编程语言来实现这些操作。

随着程序规模的扩大，早期的程序语言（如 FORTRAN 和 BASIC）都会遇到组织方面的问题。例如程序经常使用分支语句，根据某种测试的结果，执行一组或另一组指令。很多旧式
程序的执行路径很混乱（被称为“意大利面条式编程”），几乎不可能通过阅读程序来理解它，修改这种程序简直是一场灾难。'为了解决这种问题，计算机科学家开发了一种更有序的
编程方法——结构化编程（structured programming）'。C 语言具有使用这种方法的特性。例如结构化编程将分支（决定接下来应执行哪个指令）限制为一小组行为良好的结构。
C 语言的词汇表中就包含了这些结构（for 循环、while 循环、do while 循环和 if else 语句）。

'一个新原则是自顶向下（top-down）的设计'。'在 C 语言中，其理念是将大型程序分解成小型、便于管理的任务'。如果其中的一项任务仍然过大，则将它分解为更小的任务。这一过
程将一直持续下去，直到将程序划分为小型的、易于编写的模块（整理一下书房。先整理桌子、桌面、档案柜，然后整理书架。好，先从桌子开始，然后整理每个抽屉，从中间的那个抽屉
开始整理。也许我都可以管理这项任务）。'C 语言的设计有助于使用这种方法，它鼓励程序员开发程序单元（函数）来表示各个任务模块'。如上所述，结构化编程技术反映了过程性编
程的思想，根据执行的操作来构思一个程序。


// !! 面向对象编程

虽然结构化编程的理念提高了程序的清晰度、可靠性，并使之便于维护，但它在编写大型程序时，仍面临着挑战。为应付这种挑战，OOP提供了一种新方法。'与强调算法的过程性编程不
同的是，OOP 强调的是数据'。OOP 不像过程性编程那样，试图使问题满足语言的过程性方法，而是'试图让语言来满足问题的要求'。'其理念是设计与问题的本质特性相对应的数据格式'。

'在 C++ 中，类是一种规范，它描述了这种新型数据格式，对象是根据这种规范构造的特定数据结构'。 

























































































0. C 语言和 C++ 发展历史和基本原理








1. 过程性编程和面向对象编程

2. C++ 如何在 C 语言基础上添加面向对象编程的概念的

3. C++ 如何在 C 语言基础上添加泛型编程的概念的

4. 编程语言标准


