// !! 预备知识

C++ 是在 C 语言的基础上添加了对'面向对象编程'和'泛型编程'的支持,C++ 继承了 C 语言高效、简洁、快速和可移植性的传统。C++ 面向对象的特性带来了全新的编程方
法，这种方法是应对复杂程度不断提高的现代编程任务而设计的；C++ 模版特性提供了另外一种全新的编程方法---泛型编程

// !! C++ 简介

C++ 融合了三种不同的编程方式： 

1. C 语言代表的过程性语言

2. C++ 在 C 语言基础上添加的类代表的面向对象语言

3. C++ 模版支持的泛型编程

使用 C++ 原因之一就是利用其面向对象的特性。要利用这种特性，必须对标准 C 语言知识有比较深入的了解，因为它提供了基本类型、运算符、控制结构和语法规则。

// !! C++ 简史

在过去的几十年，计算机技术以令人惊讶的速度发展着，当前，笔记本电脑的计算速度和存储信息的能力超过了 20 世纪 60 年代的大型机。很多程序员可能还记得，将数叠穿孔卡
片提交给充斥整个房间的大型计算机系统的时代，而这种系统只有 100KB 的内存，比当今智能手机的内存都少得多。计算机语言也得到了发展，尽管变化可能不是天翻地覆的，但
也是非常重要的。'体积更大、功能更强的计算机引出了更大、更复杂的程序，而这些程序在程序管理和维护方面带来了新的问题'。

在 20 世纪 70 年代，C 和 Pascal 这样的语言引领人们进入了'结构化编程时代'，这种机制把秩序和规程带进了迫切需要这种性质的领域中。除了提供结构化编程工具外，'C 还
能生成简洁、快速运行的程序，并提供了处理硬件问题的能力，如管理通信端口和磁盘驱动器'。这些因素使 C 语言成为20世纪80年代占统治地位的编程语言。同时，20 世纪 80 年
代，人们也见证了一种新编程模式的成长：'面向对象编程（OOP）'。SmallTalk 和 C++ 语言具备这种功能。

// !! C 语言

1. C 语言

20 世纪 70 年代早期，贝尔实验室的 Dennis Ritchie 致力于开发 Unix 操作系统。为了完成这项工作，Ritchie 需要一种语言，它必须简洁，能够生成简洁、快速的程
序，并能够有效的控制硬件。

传统上，程序员使用汇编语言来满足这些需求，'汇编语言依赖于计算机的内部机器语言'。然而，汇编语言是低级（low-level）语言，即直接操作硬件，如直接访问 CPU 寄存器和
内存单元。因此汇编语言针对于特定的计算机处理器，要将汇编程序移植到另一种计算机上，必须使用不同的汇编语言重新编写程序。然而，UNIX 是为在不同的计算机（或平台）上工作
而设计的， 这意味着它是一种高级语言。'高级（high-level）语言致力于解决问题，而不针对特定的硬件'。'一种被称为编译器的特殊程序将高级语言翻译成特定计算机的内部语言'。
这样，就可以通过对每个平台使用不同的编译器来在不同的平台上使用同一个高级语言程序了。'Ritchie 希望有一种语言能将低级语言的效率、硬件访问能力和高级语言的通用性、可移
植性融合在一起，于是他在旧语言的基础上开发了 C 语言'。

2. C 语言编程原理

由于 C++ 在 C 语言的基础上移植了新的编程理念，因此我们首先来看一看 C 所遵循的旧的理念。'一般来说，计算机语言要处理两个概念——数据和算法'。数据是程序使用和处理的
信息，而算法是程序使用的方法。'C 语言与当前最主流的语言一样，在最初面世时也是过程性（procedural）语言，这意味着它强调的是编程的算法方面'。从概念上说，过程化编程
首先要确定计算机应采取的操作，然后使用编程语言来实现这些操作。

随着程序规模的扩大，早期的程序语言（如 FORTRAN 和 BASIC）都会遇到组织方面的问题。例如程序经常使用分支语句，根据某种测试的结果，执行一组或另一组指令。很多旧式
程序的执行路径很混乱（被称为“意大利面条式编程”），几乎不可能通过阅读程序来理解它，修改这种程序简直是一场灾难。'为了解决这种问题，计算机科学家开发了一种更有序的
编程方法——结构化编程（structured programming）'。C 语言具有使用这种方法的特性。例如结构化编程将分支（决定接下来应执行哪个指令）限制为一小组行为良好的结构。
C 语言的词汇表中就包含了这些结构（for 循环、while 循环、do while 循环和 if else 语句）。

'一个新原则是自顶向下（top-down）的设计'。'在 C 语言中，其理念是将大型程序分解成小型、便于管理的任务'。如果其中的一项任务仍然过大，则将它分解为更小的任务。这一过
程将一直持续下去，直到将程序划分为小型的、易于编写的模块（整理一下书房。先整理桌子、桌面、档案柜，然后整理书架。好，先从桌子开始，然后整理每个抽屉，从中间的那个抽屉
开始整理。也许我都可以管理这项任务）。'C 语言的设计有助于使用这种方法，它鼓励程序员开发程序单元（函数）来表示各个任务模块'。如上所述，结构化编程技术反映了过程性编
程的思想，根据执行的操作来构思一个程序。


// !! 面向对象编程

虽然结构化编程的理念提高了程序的清晰度、可靠性，并使之便于维护，但它在编写大型程序时，仍面临着挑战。为应付这种挑战，OOP提供了一种新方法。'与强调算法的过程性编程不
同的是，OOP 强调的是数据'。OOP 不像过程性编程那样，试图使问题满足语言的过程性方法，而是'试图让语言来满足问题的要求'。'其理念是设计与问题的本质特性相对应的数据格式'。

'在 C++ 中，类是一种规范，它描述了这种新型数据格式，对象是根据这种规范构造的特定数据结构'。例如，类可以描述公司管理人员的基本特征（姓名、头衔、工资、特长等），而
对象则代表特定的管理人员（Guilford Sheepblat、副总裁、$925000、知道如何恢复 Windows 注册表）。'通常，类规定了可使用哪些数据来表示对象以及可以对这些数据执行
哪些操作'。例如，假设正在开发一个能够绘制矩形的计算机绘图程序，则可以定义一个描述矩形的类。定义的数据部分应包括顶点的位置、长和宽、4 条边的颜色和样式、矩形内部的填
充颜色和图案等；定义的操作部分可以包括移动、改变大小、旋转、改变颜色和图案、将矩形复制到另一个位置上等操作。这样，当使用该程序来绘制矩形时，它将根据类定义创建一个对
象。该对象保存了描述矩形的所有数据值，因此可以使用类方法来修改该矩形。如果绘制两个矩形，程序将创建两个对象，每个矩形对应一个。

'OOP 程序设计方法首先设计类，它们准确地表示了程序要处理的东西'。例如，绘图程序可能定义表示矩形、直线、圆、画刷、画笔的类。类定义描述了对每个类可执行的操作，如移动
圆或旋转直线。然后您便可以设计一个使用这些类的对象的程序。'从低级组织（如类）到高级组织（如程序）的处理过程叫做自下向上（bottom-up）的编程'。

OOP 编程并不仅仅是将数据和方法合并为类定义。例如，OOPm还有助于创建可重用的代码，这将减少大量的工作。'信息隐藏可以保护数据，使其免遭不适当的访问'。'多态让您能够为
运算符和函数创建多个定义，通过编程上下文来确定使用哪个定义'。'继承让您能够使用旧类派生出新类'。正如接下来将看到的那样，OOP 引入了很多新的理念，使用的编程方法不同
于过程性编程。它不是将重点放在任务上，而是放在表示概念上。有时不一定使用自上向下的编程方法，而是使用自下向上的编程方法。

设计有用、可靠的类是一项艰巨的任务，幸运的是，OOP 语言使程序员在编程中能够轻松地使用已有的类。厂商提供了大量有用的类库。'C++ 真正的优点之一是：可以方便地重用和
修改现有的、经过仔细测试的代码'。

// !! C++ 和泛型编程

泛型编程（generic programming）是 C++ 支持的另一种编程模式。它与 OOP 的目标相同，即使重用代码和抽象通用概念的技术更简单。不过 'OOP 强调的是编程的数据方面，而
泛型编程强调的是独立于特定数据类型'。它们的侧重点不同。'OOP 是一个管理大型项目的工具，而泛型编程提供了执行常见任务（如对数据排序或合并链表）的工具'。术语泛型
（generic）指的是创建独立于类型的代码。C++ 的数据表示有多种类型——整数、小数、字符、字符串、用户定义的、由多种类型组成的复合结构。例如要对不同类型的数据进行排序，
通常必须为每种类型创建一个排序函数。泛型编程需要对语言进行扩展，以便可以只编写一个泛型（即不是特定类型的）函数，并将其用于各种实际类型。'C++ 模板提供了完成这种任务
的机制'。

// !! C++ 的起源

与 C 语言一样，C++ 也是在贝尔实验室诞生的，Bjarne Stroustrup 于 20 世纪 80 年代在这里开发出了这种语言。用他自己的话来说: “C++ 主要是为了我的朋友和我不必再
使用汇编语言、C 语言或其他现代高级语言来编程而设计的。它的主要功能是可以更方便地编写出好程序，让每个程序员更加快乐”。

'Stroustrup 比较关心的是让 C++ 更有用，而不是实施特定的编程原理或风格'。在确定 C++ 语言特性方面，真正的编程需要比纯粹的原理更重要。Stroupstrup 之所以在 C 
的基础上创建 C++，是因为C语言简洁、适合系统编程、使用广泛且与 UNIX 操作系统联系紧密。C++ 的 OOP 方面是受到了计算机模拟语言 Simula67 的启发。Stroustrup 加入了
OOP 特性和对 C 的泛型编程支持，但并没有对C的组件作很大的改动。因此，C++ 是 C 语言的超集，这意味着任何有效的 C 程序都是有效的 C++ 程序。它们之间有些细微的差异，但
无足轻重。C++ 程序可以使用已有的 C 软件库。库是编程模块的集合，可以从程序中调用它们。库对很多常见的编程问题提供了可靠的解决方法，因此能节省程序员大量的时间和工作量。
这也有助于 C++ 的广泛传播。

在 C++ 获得一定程度的成功后，Stroustrup 才添加了模板，这使得进行泛型编程成为可能。在模板特性被使用和改进后，人们才逐渐认识到，它们和 OOP 同样重要——甚至比 OOP 
还重要，但有些人不这么认为。'C++ 融合了 OOP、泛型编程和传统的过程性方法，这表明 C++ 强调的是实用价值，而不是意识形态方法，这也是该语言获得成功的原因之一'。


// !! 可移植性和标准

假设您为运行 Windows 2000 的老式奔腾 PC 编写了一个很好用的 C++ 程序，而管理人员决定用使用不同操作系统（如Mac OS X或Linux）和处理器（如SPARC处理器）的计算机
替换它。该程序是否可以在新平台上运行呢？ '当然，必须使用为新平台设计的 C++ 编译器对程序重新编译。但是否需要修改编写好的代码呢？如果在不修改代码的情况下，重新编译程
序后，程序将运行良好，则该程序是可移植的'。


在可移植性方面存在两个障碍:

1. 其中的一个是硬件。硬件特定的程序是不可移植的

2. 可移植性的第二个障碍是语言上的差异

   虽然多数实现都希望其 C++ 版本与其他版本兼容，但如果没有准确描述语言工作方式的公开标准，这将很难做到。因此，美国国家标准局（American National Standards 
   Institute，ANSI）在 1990 年设立了一个委员会（ANSI X3J16），专门负责制定 C++ 标准（ANSI制定了C语言标准）。国际标准化组织（ISO）很快通过自己的委员会
   （ISO-WG-21）加入了这个行列，创建了联合组织 ANSI/ISO，致力于制定 C++ 标准。经过多年的努力，制定出了一个国际标准 ISO/IEC 14882:1998，并于 1998 年获得了
   ISO、IEC（International Electrotechnical Committee，国际电工技术委员会）和 ANSI 的批准。该标准常被称为 C++98，它不仅描述了已有的 C++特性，还对该语言
   进行了扩展，添加了异常、运行阶段类型识别（RTTI）、模板和标准模板库（STL）。2003 年，发布了 C++ 标准第二版（IOS/IEC 14882:2003）；这个新版本是一次技术性修
   订，这意味着它对第一版进行了整理——修订错误、减少多义性等，但没有改变语言特性。这个版本常被称为 C++03。由于 C++03 没有改变语言特性，因此我们使用 C++98 表示 
   C++98/C++2003。C++ 在不断发展。ISO标准委员会于 2001 年 8 月批准了新标准 ISO/IEC 14882:2011，该标准以前称为 C++11。ISO C++ 标准还吸收了 ANSI C 语言标
   准，因为 C++ 应尽量是 C 语言的超集。这意味着在理想情况下，任何有效的 C 程序都应是有效的 C++ 程序。ANSI C 与对应的 C++ 规则之间存在一些差别，但这种差别很小。
   实际上，ANSI C 加入了 C++ 首次引入的一些特性，如函数原型和类型限定符 const。ANSI C 标准不仅定义了 C 语言，还定义了一个 ANSI C 实现必须支持的标准C库。C++ 11
   也使用了这个库；本书将其称为标准 C 库或标准库。另外，ANSI/ISO C++ 标准还提供了一个C++ 标准类库。


// !! 程序创建的技巧

假设您编写了一个 C++ 程序。如何让它运行起来呢 ？具体的步骤取决于计算机环境和使用的 C++ 编译器，但大体如下:


1. 使用文本编辑器编写程序，并将其保存到文件中，这个文件就是程序的源代码

2. 编译源代码。这意味着运行一个程序，将源代码翻译为主机使用的内部语言——机器语言。包含了翻译后的程序的文件就是程序的目标代码（object code）

3. 将目标代码与其他代码链接起来。例如，C++ 程序通常使用库。C++ 11 库包含一系列计算机例程（被称为函数）的目标代码，这些函数可以执行诸如在屏幕上显示信息或计算平
   方根等任务。链接指的是将目标代码同使用的函数的目标代码以及一些标准的启动代码（startup code）组合起来，生成程序的运行阶段版本。包含该最终产品的文件被称为可执
   行代码


// !! 总结

随着计算机的功能越来越强大，计算机程序越来越庞大而复杂。为应对这种挑战，计算机语言也得到了改进，以便编程过程更为简单。C 语言新增了诸如控制结构和函数等特性，以便更
好地控制程序流程，支持结构化和模块化程度更高的方法；而 C++ 增加了对面向对象编程和泛型编程的支持，这有助于提高模块化和创建可重用代码，从而节省编程时间并提高程序的
可靠性。

C++ 的流行导致大量用于各种计算平台的 C++ 实现得以面世；而 ISO C++ 标准（C++98/03和C++11）为确保众多实现的相互兼容提供了基础。这些标准规定了语言必须具备的特性、
语言呈现出的行为、标准库函数、类和模板，旨在实现该语言在不同计算平台和实现之间的可移植性。

要创建 C++ 程序，可创建一个或多个源代码文件，其中包含了以 C++ 语言表示的程序。这些文件是文本文件，它们经过编译和链接后将得到机器语言文件，后者构成了可执行的程序。
上述任务通常是在 IDE 中完成的，IDE 提供了用于创建源代码文件的文本编辑器、用于生成可执行文件的编译器和链接器以及其他资源，如项目管理和调试功能。然而，这些任务也可
以在命令行环境中通过调用合适的工具来完成。

























































































0. C 语言和 C++ 发展历史和基本原理








1. 过程性编程和面向对象编程

2. C++ 如何在 C 语言基础上添加面向对象编程的概念的

3. C++ 如何在 C 语言基础上添加泛型编程的概念的

4. 编程语言标准


