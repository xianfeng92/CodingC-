// !! 开始学习 C++

// !! 进入C++

首先介绍一个显示消息的简单 C++ 程序。使用 C++ 工具 cout 生成字符输出。C++ 对大小写敏感，也就是说区分大写字符和小写字符。这意味着大小写必须与示例中相同。
例如，该程序使用的是 cout，如果将其替换为 Cout 或 COUT，程序将无法通过编译，并且编译器将指出使用了未知的标识符（编译器也是对拼写敏感的，因此请不要使用
kout或coot）。'文件扩展名 cpp 是一种表示 C++ 程序的常用方式'。

// myfirst.cpp  -- display a message

#include <iostream>

int main()
{
    using namespace std;
    cout << "Come up and C++ me some time" << endl;
    cout << "you won't forget it" << endl;
    return 0;
}

 » g++ --std=c++11 myfirst.cpp 
--------------------------------------------------------------------------------
 » ./a.out

Come up and C++ me some time
you won't forget it'


您使用函数来创建 C++ 程序。'通常先将程序组织为主要任务，然后设计独立的函数来处理这些任务'。

程序 myfirst.cpp 中的示例非常简单，只包含一个名为 main( ) 的函数。myfirst.cpp 示例包含下述元素。

1. 注释，由前缀//标识

2. 预处理器编译指令#include

3. 函数头：int main()

4. 编译指令 using namespace

5. 函数体，用{和}括起

6. 使用 C++ 的 cout 工具显示消息的语句

7. 结束 main( ) 函数的 return 语句


先来看看 main( ) 函数，因为了解了 main( ) 的作用后，main( ) 前面的一些特性（如预处理器编译指令）将更易于理解。

// !! main() 函数

去掉修饰后，程序 myfirst.cpp 示例程序的基本结构如下:

int main()
{
    statements;
    return 0;
}

这几行表明有一个名为 main( ) 的函数，并描述了该函数的行为。这几行代码构成了函数定义（function definition）。该定义由两部分组成：第一行 int main() 叫函数头
（function heading），花括号{ }中包括的部分叫函数体。'函数头对函数与程序其他部分之间的接口进行了总结；函数体是指出函数应做什么的计算机指令'。在 C++ 中，每条
完整的指令都称为语句。所有的语句都以分号结束。main() 中最后一条语句叫做返回语句（return statement），它结束该函数。


1. 语句和分号

   语句是要执行的操作。为理解源代码，编译器需要知道一条语句何时结束，另一条语句何时开始。有些语言使用语句分隔符。例如，FORTRAN 通过行尾将语句分隔开来，Pascal 使用
   分号分隔语句。在 Pascal 中，有些情况下可以省略分号，例如 END 前的语句后面，这种情况下，实际上并没有将两条语句分开。'不过 C++ 与 C 一样，也使用终止符
   （terminator），而不是分隔符。终止符是一个分号，它是语句的结束标记，是语句的组成部分，而不是语句之间的标记'。结论是：在 C++ 中，不能省略分号。

2. 作为接口的函数头

   通常，C++ 函数可被其他函数激活或调用，函数头描述了函数与调用它的函数之间的接口。位于函数名前面的部分叫做函数返回类型，它描述的是从函数返回给调用它的函数的信息。
   函数名后括号中的部分叫做形参列表（argument list）或参数列表（parameter list）；它描述的是从调用函数传递给被调用的函数的信息。这种通用格式用于 main( ) 时让
   人感到有些迷惑，因为通常并不从程序的其他部分调用 main()。然而，通常，main() 被启动代码调用，而启动代码是由编译器添加到程序中的，是程序和操作系统
   （UNIX、Windows 7或其他操作系统）之间的桥梁。事实上，该函数头描述的是 main() 和操作系统之间的接口。来看一下 main() 的接口描述，该接口从 int 开始。C++ 函数
   可以给调用函数返回一个值，这个值叫做返回值（return value）。在这里，从关键字 int 可知，main() 返回一个整数值。接下来，是空括号。通常，C++ 函数在调用另一个
   函数时，可以将信息传递给该函数。括号中的函数头部分描述的就是这种信息。在这里，空括号意味着 main() 函数不接受任何信息，或者 main()不接受任何参数。
   （main() 不接受任何参数并不意味着 main() s是不讲道理的、发号施令的函数。相反，术语参数（argument）只是计算机人员用来表示从一个函数传递给另一个函数的信息）。
   简而言之，下面的函数头表明 main() 函数可以给调用它的函数返回一个整数值，且不从调用它的函数那里获得任何信息.

   int main();

   int main(void);// very explicit style

   最后，ANSI/ISO C++ 标准对那些抱怨必须在 main() 函数最后包含一条返回语句过于繁琐的人做出了让步。如果编译器到达 main() 函数末尾时没有遇到返回语句，则认为 
   main() 函数以如下语句结尾：

   return 0;

   这条隐含的返回语句只适用于 main() 函数，而不适用于其他函数。


3. 为什么 main() 不能使用其他名称

   之所以将 myfirst.cpp 程序中的函数命名为 main()，原因是必须这样做。通常 C++ 程序必须包含一个名为 main() 的函数（不是Main( )、MAIN( )或mane( )。记住，
   大小写和拼写都要正确）。由于 myfirst.cpp 程序只有一个函数，因此该函数必须担负起 main() 的责任。'在运行 C++ 程序时，通常从main() 函数开始执行。因此，如果
   没有main( )，程序将不完整，编译器将指出未定义 main() 函数'。


4. C++ 注释

   C++ 注释以双斜杠打头。'注释是程序员为读者提供的说明，通常标识程序的一部分或解释代码的某个方面'。编译器忽略注释，毕竟，它对 C++ 的了解至少和程序员一样，在任何
   情况下，它都不能理解注释。
   // !! 提示：

   应使用注释来说明程序。程序越复杂，注释的价值越大。注释不仅有助于他人理解这些代码，也有助于程序员自己理解代码，特别是隔了一段时间没有接触该程序的情况下。

   C-风格注释

   C++ 也能够识别 C 注释，C 注释包括在符号 /* 和 */ 之间：

   #include <iostream> /* a C-style comment */

   由于 C-风格注释以 */ 结束，而不是到行尾结束，因此可以跨越多行。可以在程序中使用 C 或 C++ 风格的注释，也可以同时使用这两种注释。但'应尽量使用 C++ 注释，因为这
   不涉及到结尾符号与起始符号的正确配对，所以它产生问题的可能性很小'。事实上，C99 标准也在 C 语言中添加了 // 注释。


5.  C++ 预处理器和 iostream 文件

    下面简要介绍一下需要知道的一些知识。如果程序要使用 C++ 输入或输出工具，请提供这样两行代码：
    #include<iostream>
    using namespace std;

    可使用其他代码替换第 2 行，这里使用这行代码旨在简化该程序（如果编译器不接受这几行代码，则说明它没有遵守标准 C++98，使用它来编译本书的示例时，将出现众多其他的
    问题）。'C++ 和 C 一样，也使用一个预处理器，该程序在进行主编译之前对源文件进行处理'。

    #include <iostream>

    该编译指令导致预处理器将 iostream 文件的内容添加到程序中。这是一种典型的预处理器操作: 在源代码被编译之前，替换或添加文本。

    为什么要将 iostream 文件的内容添加到程序中呢？
    
    答案'涉及程序与外部世界之间的通信。iostream 中的io指的是输入（进入程序的信息）和输出（从程序中发送出去的信息）'。C++ 的输入/输出方案涉及 iostream 文件中的
    多个定义。为了使用 cout 来显示消息，第一个程序需要这些定义。'#include 编译指令导致 iostream 文件的内容随源代码文件的内容一起被发送给编译器'。实际上，
    iostream 文件的内容将取代程序中的代码行 #include <iostream>。原始文件没有被修改，而是将源代码文件和 iostream 组合成一个复合文件，编译的下一阶段将使用
    该文件。

6. 头文件名

   像 iostream 这样的文件叫做包含文件（include file）—由于它们被包含在其他文件中；'也叫头文件（header file）—由于它们被包含在文件起始处'。'C++ 编译器自带了很
   多头文件，每个头文件都支持一组特定的工具'。C 语言的传统是头文件使用扩展名 h，将其作为一种通过名称标识文件类型的简单方式。例如: 头文件 math.h 支持各种 C 语言
   数学函数，但 C++ 的用法变了。现在对老式 C 的头文件保留了扩展名 h（C++程序仍可以使用这种文件），而 C++ 头文件则没有扩展名。有些 C 头文件被转换为 C++ 头文件，
   这些文件被重新命名，去掉了扩展名 h（使之成为C++风格的名称），并在文件名称前面加上前缀c（表明来自C语言）。例如，C++ 版本的 math.h 为 cmath。有时 C 头文件的 C 版本
   和 C++ 版本相同，而有时候新版本做了一些修改。

7. 名称空间

   如果使用 iostream，而不是 iostream.h，则应使用下面的'名称空间编译指令'来使 iostream 中的定义对程序可用:

   using namespace std;

   这叫做 using 编译指令。最简单的办法是，现在接受这个编译指令，以后再考虑它

   名称空间支持是一项 C++ 特性，旨在让您编写大型程序以及将多个厂商现有的代码组合起来的程序时更容易，它还有助于组织程序。一个潜在的问题是，可能使用两个已封装好的产品
   ，而它们都包含一个名为 wanda() 的函数。这样，使用 wanda() 函数时，编译器将不知道指的是哪个版本。名称空间让厂商能够将其产品封装在一个叫做名称空间的单元中，这样
   就可以用名称空间的名称来指出想使用哪个厂商的产品。因此， Microflop Industries 可以将其定义放到一个名为 Microflop 的名称空间中。这样其 wanda() 函数的全称
   为 Microflop::wanda()；同样 Piscine 公司的 wanda() 版本可以表示为 Piscine::wanda()。这样，程序就可以使用名称空间来区分不同的版本了:

   Microflop::wanda();
   Piscine::wanda();

   按照这种方式，类、函数和变量便是 C++ 编译器的标准组件，它们现在都被放置在名称空间 std 中。仅当头文件没有扩展名 h 时，情况才是如此。这意味着在 iostream 中定义
   的用于输出的 cout 变量实际上是 std::cout，而 endl 实际上是 std::endl。因此，可以省略编译指令 using，以下述方式进行编码:

   using std::cout;
   using std::endl;
   using std::cin;


8. 使用 cout 进行 C++ 输出

    现在来看一看如何显示消息。myfirst.cpp 程序使用下面的 C++ 语句:

    cout << "Come up and C++ me some time" << endl;

    双引号括起的部分是要打印的消息。'在 C++ 中，用双引号括起的一系列字符叫做字符串，因为它是由若干字符组合而成的'。<< 符号表示该语句将把这个字符串发送给 cout；
    该符号指出了信息流动的路径。cout 是什么呢？ '它是一个预定义的对象，知道如何显示字符串、数字和单个字符等'。从概念上看，输出是一个流，即从程序流出的一系列字符。
    cout 对象表示这种流，其属性是在 iostream 文件中定义的。'cout 的对象属性包括一个插入运算符（<<），它可以将其右侧的信息插入到流中'。

    cout << "Come up and C++ me some time" << endl;

    它将字符串 “Come up and C++ me some time” 插入到输出流中。因此, 与其说程序显示了一条消息，不如说它将一个字符串插入到了输出流中。


9. 控制符 endl

  'endl 是一个特殊的 C++ 符号，表示一个重要的概念：重起一行'。在输出流中插入 endl 将导致屏幕光标移到下一行开头。诸如 endl 等对于 cout 来说有特殊含义的特殊符号
  被称为控制符（manipulator）。和 cout 一样，endl 也是在头文件 iostream 中定义的，且位于名称空间 std 中。C++ 还提供了另一种在输出中指示换行的旧式方法: C语言
  符号 \n， \n 被视为一个字符，名为换行符。显示字符串时，在字符串中包含换行符，而不是在末尾加上 endl，可减少输入量。'一个差别是，endl 确保程序继续运行前刷新输出
  （将其立即显示在屏幕上）'； 而使用 “\n” 不能提供这样的保证，这意味着在有些系统中，有时可能在您输入信息后才会出现提示。

10. C++ 源代码的格式化

    有些语言（如FORTRAN）是面向行的，即每条语句占一行。对于这些语言来说，回车的作用是将语句分开。然而，在 C++ 中，分号标示了语句的结尾。因此，在 C++ 中，回车的作
    用就和空格或制表符相同。也就是说，在 C++ 中，通常可以在能够使用回车的地方使用空格，反之亦然。这说明既可以把一条语句放在几行上，也可以把几条语句放在同一行上。
    例如，可以将 myfirst.cpp 重新格式化为如下所示:

    #include <iostream>

    int
    main()
    {
        using namespace 
        std; cout 
        << 
        "Come up and C++ me some time"
        << 
        endl;

    }

    这样虽然不太好看，但仍然是合法的代码。必须遵守一些规则，具体地说，在 C 和 C++ 中，不能把空格、制表符或回车放在元素（比如名称）中间，也不能把回车放在字符串中间。

    下面是一个不能这样做的例子:

    int ma in() // INVALID --- space in name
    re
    turn 0; // INVALID -- carriage return in word

    然而，C++11 新增的原始（raw）字符串可包含回车


    1. 源代码中的标记和空白

    一行代码中不可分割的元素叫做标记（token）。'通常必须用空格、制表符或回车将两个标记分开，空格、制表符和回车统称为空白（white space）'。有些字符（如括号和逗
    号）是不需要用空白分开的标记。


// !! C++ 源代码风格

虽然 C++ 在格式方面赋予了您很大的自由，但如果遵循合理的风格, 程序将更便于阅读。有效但难看的代码不会令人满意。它遵循了下述规则。

1. 每条语句占一行

2. 每个函数都有一个开始花括号和一个结束花括号，这两个花括号各占一行

3. 函数中的语句都相对于花括号进行缩进

4. 与函数名称相关的圆括号周围没有空白

前三条规则旨在确保代码清晰易读；第四条规则帮助区分函数和一些也使用圆括号的 C++ 内置结构（如循环）。







 





















































