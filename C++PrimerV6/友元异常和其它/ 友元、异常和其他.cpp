// !! 友元、异常和其他

本章先介绍一些 C++ 语言最初就有的特性，然后介绍 C++ 语言新增的一些特性。前者包括友元类、友元成员函数和嵌套类，它们是在其他类中声明的类。

后者包括异常、运行阶段类型识别(RTTI)和改进后的类型转换控制:

1. C++ 异常处理提供了处理特殊情况的机制，如果不对其进行处理，将导致程序终止

2. RTTI 是一种确定对象类型的机制

3. 新的类型转换运算符提高了类型转换的安全性


// !! 友元

'类并非只能拥有友元函数，也可以将类作为友元'。在这种情况下,友元类的所有方法都可以访问原始类的私有成员和保护成员。另外，也可以做更严格的限制，只将特定的成员函
数指定为另一个类的友元。


// !! 友元类

什么时候希望一个类成为另一个类的友元呢？

假定需要编写一个模拟电视机和遥控器的简单程序。决定定义一个 Tv 类和一个 Remote 类，来分别表示电视机和遥控器。很明显，这两个类之间应当存在某种关系，但是什么样
的关系呢？ 遥控器并非电视机，反之亦然，所以公有继承的 is-a 关系并不适用。遥控器也非电视机的一部分，反之亦然，因此包含或私有继承和保护继承的 has-a 关系也不适
用。事实上，'遥控器可以改变电视机的状态，这表明应将 Romote 类作为 Tv 类的一个友元'。

首先定义 Tv 类, 可以用一组状态成员(描述电视各个方面的变量)来表示电视机。下面是一些可能的状态:

1. 开/关

2. 频道设置

3. 音量设置

4. 有线电视或天线调节模式

5. TV调谐或A/V输入

接下来，必须给类提供一些修改这些设置的方法。当前，很多电视机都将控件藏在面板后面，但大多数电视机还是可以在不使用遥控器的情况下进行换台等工作的，通常只能逐频道
换台，而不能随意选台。同样，通常还有两个按钮，分别用来增加和降低音量。

遥控器的控制能力应与电视机内置的控制功能相同，它的很多方法都可通过使用 Tv 方法来实现。另外，遥控器通常都提供随意选择频道的功能，即可以直接从 2 频道换到 20 频
道，并不用逐次切换频道。另外，很多遥控器都有多种工作模式，如用作电视控制器和 DVD 遥控器。

这些考虑因素表明，定义应类似于 tv.h。定义中包括一些被定义为枚举的常数。下面的语句使 Remote 成为友元类：

friend class Remote;

友元声明可以位于公有、私有或保护部分，其所在的位置无关紧要。由于 Remote 类提到了 Tv 类，所以编译器必须了解 Tv 类后，才能处理 Remote 类，为此，最简单的方法
是首先定义 Tv 类。


tv.h 中，大多数类方法都被定义为内联的。除构造函数外，所有的 Romote 方法都将一个 Tv 对象引用作为参数，这表明遥控器必须针对特定的电视机。

tv.cpp 列出了其余的定义。音量设置函数将音量成员增减一个单位，除非声音到达最大或最小。频道选择函数使用循环方式，最低的频道设置为 1，它位于最高的频道设置
maxchannel 之后。

很多方法都使用条件运算符在两种状态之间切换:

void onoff(){state = (state == On)? Off:On}

如果两种状态值分别为 true（1）和 false（0），则可以结合使用将在附录E讨论的按位异或和赋值运算符（^=）来简化上述代码:

void onoff() {state^=1;}


'类友元是一种自然用语，用于表示一些关系'。如果不使用某些形式的友元关系，则必须将 Tv 类的私有部分设置为公有的，或者创建一个笨拙的、大型类来包含电视机和遥控器。
这种解决方法无法反应这样的事实, 即同一个遥控器可用于多台电视机。





